{"version":3,"sources":["components/Button.js","components/SelectBox.js","components/TextBox.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","style","marginTop","width","variant","color","SelectBox","model","setModel","inputLabel","React","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","margin","InputLabel","ref","htmlFor","Select","value","onChange","e","target","inputProps","name","id","MenuItem","TextBox","text","setText","TextField","label","fullWidth","multiline","rows","postGenerateTextEndpoint","fn","data","complete","pending","error","res","setRes","req","setReq","axios","then","catch","useAsyncEndpoint","url","method","App","generatedText","postGenerateText","className","noValidate","autoComplete","userId","result","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcccae6f.chunk.js","sourcesContent":["import { Button as MaterialButton } from '@material-ui/core';\nimport React from 'react';\n\n\nconst Button = ({ onClick }) => (\n    <MaterialButton\n        style={{ marginTop: '1em', width: 'fit-content' }}\n        onClick={onClick}\n        variant=\"outlined\"\n        color=\"primary\">\n        Generate\n  </MaterialButton>\n)\n\nexport default Button;","import { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport React from 'react';\n\n\nconst SelectBox = ({ model, setModel }) => {\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    return (\n        <FormControl\n            margin='normal'\n            style={{ width: '200px' }}\n            variant='outlined'>\n            <InputLabel ref={inputLabel} htmlFor=\"model-select\">Model</InputLabel>\n            <Select\n                value={model}\n                labelWidth={labelWidth}\n                onChange={e => setModel(e.target.value)}\n                inputProps={{\n                    name: 'model',\n                    id: 'model-select',\n                }}\n            >\n                <MenuItem value={'gpt2'}>Small (117M)</MenuItem>\n                <MenuItem value={'gpt2-medium'}>Medium (345M)</MenuItem>\n                <MenuItem value={'gpt2-large'}>Large (774M)</MenuItem>\n            </Select>\n        </FormControl>\n    )\n};\n\nexport default SelectBox;","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\nconst TextBox = ({ text, setText }) => (\n    <TextField\n        margin='normal'\n        label=\"Write something...\"\n        variant=\"outlined\"\n        fullWidth\n        multiline\n        rows='4'\n        value={text}\n        onChange={e => setText(e.target.value)}\n    />\n);\n\nexport default TextBox;\n","import React from 'react';\nimport axios from 'axios';\n\nconst ENDPOINT_URL = \"https://gpt2.volandino.com/generate\";\n\nconst useAsyncEndpoint = fn => {\n    const [res, setRes] = React.useState({ data: null, complete: false, pending: false, error: false });\n    const [req, setReq] = React.useState();\n\n    React.useEffect(() => {\n        if (!req) return;\n        setRes({ data: null, pending: true, error: false, complete: false });\n        axios(req)\n            .then(res =>\n                setRes({ data: res.data, pending: false, error: false, complete: true })\n            )\n            .catch(() =>\n                setRes({ data: null, pending: false, error: true, complete: true })\n            );\n    }, [req]);\n\n    return [res, (...args) => setReq(fn(...args))];\n}\n\nexport const postGenerateTextEndpoint = () => {\n    /* eslint-disable react-hooks/rules-of-hooks */\n    return useAsyncEndpoint(data => ({ url: ENDPOINT_URL, method: \"POST\", data }));\n}\n","import React, { useState } from 'react';\nimport Button from './components/Button';\nimport SelectBox from './components/SelectBox';\nimport TextBox from './components/TextBox';\nimport './styles.scss';\nimport { postGenerateTextEndpoint } from './utils';\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [model, setModel] = useState('gpt2');\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\n\n  const generateText = () => {\n    postGenerateText({ text, model, userId: 1 });\n  }\n\n  return (\n    <div className='app-container'>\n      <form noValidate autoComplete='off'>\n        <h1>GPT-2 API yeah</h1>\n        <h4>for now only the small gpt2 version is active</h4>\n        <SelectBox model={model} setModel={setModel} />\n        <TextBox text={text} setText={setText} />\n        <Button onClick={generateText} />\n      </form>\n\n      {generatedText.pending &&\n        <div className='result pending'>Please wait</div>}\n\n      {generatedText.complete &&\n        (generatedText.error ?\n          <div className='result error'>Bad Request</div> :\n          <div className='result valid'>\n            {generatedText.data.result}\n          </div>)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}